services:
  # ──────────────────────────────────────────────────
  # 1) Laravel app (patients)
  # ──────────────────────────────────────────────────
  patients-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: patients_app
    restart: on-failure
    working_dir: /var/www/html
    volumes:
      - .:/var/www/html
    networks:
      - patients_network
      - shared_services_network
    depends_on:
      - patients-db
    env_file:
      - .env
    environment:
      - APP_ENV=${APP_ENV}
      - APP_DEBUG=${APP_DEBUG}
      - APP_KEY=${APP_KEY}
      - DB_CONNECTION=${DB_CONNECTION}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - QUEUE_CONNECTION=database
    healthcheck:
      test: ["CMD", "php", "-r", "echo @fsockopen('localhost', 9000) ? 'Healthy' : 'Unhealthy';"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # ──────────────────────────────────────────────────
  # 2) Nginx (web server)
  # ──────────────────────────────────────────────────
  patients-webserver:
    image: nginx:latest
    container_name: patients_webserver
    restart: on-failure
    ports:
      - "8002:80"      # Cambiar a puerto distinto de 8001
      - "8445:443"     # Cambiar a puerto distinto de 8444
    volumes:
      - .:/var/www/html
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./certs:/etc/nginx/certs
    networks:
      - patients_network
      - shared_services_network
    depends_on:
      - patients-app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # ──────────────────────────────────────────────────
  # 3) Mysql (database server)
  # ──────────────────────────────────────────────────
  patients-db:
    image: mysql:8.0
    container_name: patients_db
    restart: on-failure
    ports:
      - "3309:3306"  # Asegúrate de que no colisione con sales (usa 3308 allá)
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - patients_network
    env_file:
      - .env
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    command: ["--default-authentication-plugin=mysql_native_password"]
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # ──────────────────────────────────────────────────
  # 4) Queue Worker (si aplica)
  # ──────────────────────────────────────────────────
  patients-queue_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: patients_queue_worker
    working_dir: /var/www/html
    restart: unless-stopped
    command: php artisan queue:work --queue=default --tries=3 --timeout=60
    volumes:
      - .:/var/www/html
    networks:
      - patients_network
      - shared_services_network
    depends_on:
      patients-app:
        condition: service_started
      patients-db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - APP_ENV=${APP_ENV}
      - APP_DEBUG=${APP_DEBUG}
      - APP_KEY=${APP_KEY}
      - DB_CONNECTION=${DB_CONNECTION}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - QUEUE_CONNECTION=database
    healthcheck:
      test: ["CMD", "php", "-r", "echo @fsockopen('localhost', 9000) ? 'Healthy' : 'Unhealthy';"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  kafka-consumer-orders:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kafka_consumer_orders
    working_dir: /var/www/html
    restart: unless-stopped
    command: php artisan kafka:consume-orders
    volumes:
      - .:/var/www/html
    networks:
      - patients_network
      - shared_services_network
    depends_on:
      patients-app:
        condition: service_started
      patients-db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - APP_ENV=${APP_ENV}
      - APP_DEBUG=${APP_DEBUG}
      - APP_KEY=${APP_KEY}
      - DB_CONNECTION=${DB_CONNECTION}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - QUEUE_CONNECTION=database

volumes:
  mysql_data:

networks:
  patients_network:
    driver: bridge
  shared_services_network:
    name: shared-services-network
    external: true
